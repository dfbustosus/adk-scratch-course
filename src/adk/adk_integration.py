"""Integration helpers for the official Google ADK (google-adk).

These utilities provide a thin
Pythonic wrapper for common operations like environment validation, scaffolding
an agent, and launching the ADK dev UI.
"""

from __future__ import annotations

import os
import subprocess  # nosec
import sys
from importlib import metadata
from pathlib import Path
from typing import Any, Dict, Optional


def get_google_adk_version() -> Optional[str]:
    """Return the installed google-adk package version, if available."""
    try:
        return metadata.version("google-adk")
    except metadata.PackageNotFoundError:
        return None


def validate_adk_environment() -> Dict[str, Any]:
    """Validate ADK-related environment and return a status dict.

    The report includes Python, ADK installation, and whether AI Studio or
    Vertex AI auth variables are present.
    """
    status: Dict[str, Any] = {
        "python_version": sys.version,
        "python_path": sys.executable,
        "adk_installed": False,
        "adk_version": None,
        "env_mode": "unset",  # one of: unset | aistudio | vertex
        "environment_variables": {},
        "warnings": [],
        "errors": [],
    }

    adk_version = get_google_adk_version()
    status["adk_version"] = adk_version
    status["adk_installed"] = adk_version is not None

    # Determine environment mode
    use_vertex = os.getenv("GOOGLE_GENAI_USE_VERTEXAI")
    if use_vertex is None:
        status["env_mode"] = "unset"
    elif use_vertex.upper() == "TRUE":
        status["env_mode"] = "vertex"
    else:
        status["env_mode"] = "aistudio"

    # Collect variables depending on mode
    env: Dict[str, str] = status["environment_variables"]
    if status["env_mode"] == "aistudio":
        api_key = os.getenv("GOOGLE_API_KEY")
        env["GOOGLE_API_KEY"] = "✓ Set" if api_key else "Not set"
        if not api_key:
            status["warnings"].append(
                "GOOGLE_API_KEY not set; AI Studio mode won't work"
            )
    elif status["env_mode"] == "vertex":
        project = os.getenv("GOOGLE_CLOUD_PROJECT")
        location = os.getenv("GOOGLE_CLOUD_LOCATION")
        env["GOOGLE_CLOUD_PROJECT"] = "✓ Set" if project else "Not set"
        env["GOOGLE_CLOUD_LOCATION"] = "✓ Set" if location else "Not set"
        if not project:
            status["errors"].append("GOOGLE_CLOUD_PROJECT is required for Vertex AI")
        if not location:
            status["warnings"].append(
                "GOOGLE_CLOUD_LOCATION is not set; " "default region not configured"
            )

    return status


def create_adk_agent_skeleton(name: str, output: Optional[Path] = None) -> Path:
    """Create an ADK agent package with the Quickstart-compliant structure.

    Returns the path to the created package directory.
    """
    if output is None:
        # Default to creating the agent in the 'agents' subdirectory.
        # Assumes a standard project layout where this script is in a child
        # directory of the project root.
        base_dir = Path(__file__).resolve().parent.parent.parent / "agents"
    else:
        base_dir = output
    pkg_dir = base_dir / name
    pkg_dir.mkdir(parents=True, exist_ok=True)

    init_py = pkg_dir / "__init__.py"
    agent_py = pkg_dir / "agent.py"
    env_template = pkg_dir / ".env.template"

    init_py.write_text("from . import agent  # noqa: F401\n", encoding="utf-8")

    agent_code = f'''"""ADK agent generated by scaffolder."""
from __future__ import annotations

import datetime
from zoneinfo import ZoneInfo
from google.adk.agents import Agent


def get_weather(city: str) -> dict:
    if city.lower() == "new york":
        return {{
            "status": "success",
            "report": (
                "The weather in New York is sunny with a temperature of 25°C "
                "(77°F)."
            ),
        }}
    return {{
        "status": "error",
        "error_message": (
            f"Weather information for '{'{'}city{'}'}' is not "
            f"available."
        ),
    }}


def get_current_time(city: str) -> dict:
    if city.lower() == "new york":
        tz_identifier = "America/New_York"
    else:
        return {{
            "status": "error",
            "error_message": (
                f"Sorry, I don't have timezone information for {'{'}city{'}'}."
            ),
        }}
    tz = ZoneInfo(tz_identifier)
    now = datetime.datetime.now(tz)
    report = (
        f"The current time in {'{'}city{'}'} is "
        f"{{now.strftime('%Y-%m-%d %H:%M:%S %Z%z')}}"
    )
    return {{"status": "success", "report": report}}


root_agent = Agent(
    name="{name}",
    model="gemini-2.0-flash",
    description=(
        "Agent that answers questions about the time and weather in a city."
    ),
    instruction=(
        "You are a helpful agent who can answer user questions about the "
        "time and weather in a city."
    ),
    tools=[get_weather, get_current_time],
)
'''
    agent_py.write_text(agent_code, encoding="utf-8")

    env_template.write_text(
        (
            "# Copy this file to .env and fill ONE of the following\n"
            "# configurations\n\n"
            "# --- Option 1: Google AI Studio (API key) ---\n"
            "GOOGLE_GENAI_USE_VERTEXAI=FALSE\n"
            "GOOGLE_API_KEY=YOUR_API_KEY_HERE\n\n"
            "# --- Option 2: Google Cloud Vertex AI ---\n"
            "# Make sure you have run: gcloud auth application-default login\n"
            "GOOGLE_GENAI_USE_VERTEXAI=TRUE\n"
            "GOOGLE_CLOUD_PROJECT=your-gcp-project-id\n"
            "GOOGLE_CLOUD_LOCATION=us-central1\n"
        ),
        encoding="utf-8",
    )

    return pkg_dir


def run_adk_web() -> int:
    """Run the ADK Dev UI (adk web). Returns the process return code."""
    agents_dir = Path(__file__).resolve().parent.parent.parent / "agents"
    proc = subprocess.run(["adk", "web"], check=False, cwd=agents_dir)  # nosec
    return proc.returncode


def run_adk_run(package: str, message: Optional[str] = None) -> int:
    """Run an ADK agent from a package (adk run <package>).

    Optionally provide an initial input message.
    """
    # The adk command needs to be run from the directory containing the agent packages.
    agents_dir = Path(__file__).resolve().parent.parent.parent / "agents"

    if message is None:
        proc = subprocess.run(
            ["adk", "run", package], check=False, cwd=agents_dir
        )  # nosec
        return proc.returncode

    proc = subprocess.run(  # nosec
        ["adk", "run", package],
        input=message.encode("utf-8"),
        check=False,
        cwd=agents_dir,
    )
    return proc.returncode
